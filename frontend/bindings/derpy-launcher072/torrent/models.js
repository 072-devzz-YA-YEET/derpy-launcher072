// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class Source {
    /**
     * Creates a new Source instance.
     * @param {Partial<Source>} [$$source = {}] - The source object to create the Source.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("downloads" in $$source)) {
            /**
             * @member
             * @type {SourceDownload[]}
             */
            this["downloads"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Source instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Source}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("downloads" in $$parsedSource) {
            $$parsedSource["downloads"] = $$createField1_0($$parsedSource["downloads"]);
        }
        return new Source(/** @type {Partial<Source>} */($$parsedSource));
    }
}

export class SourceDownload {
    /**
     * Creates a new SourceDownload instance.
     * @param {Partial<SourceDownload>} [$$source = {}] - The source object to create the SourceDownload.
     */
    constructor($$source = {}) {
        if (!("title" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["title"] = "";
        }
        if (!("uris" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["uris"] = [];
        }
        if (!("uploadDate" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["uploadDate"] = "";
        }
        if (!("fileSize" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["fileSize"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SourceDownload instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SourceDownload}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("uris" in $$parsedSource) {
            $$parsedSource["uris"] = $$createField1_0($$parsedSource["uris"]);
        }
        return new SourceDownload(/** @type {Partial<SourceDownload>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = SourceDownload.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = $Create.Array($Create.Any);
