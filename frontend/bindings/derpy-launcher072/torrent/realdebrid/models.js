// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class AvailableHost {
    /**
     * Creates a new AvailableHost instance.
     * @param {Partial<AvailableHost>} [$$source = {}] - The source object to create the AvailableHost.
     */
    constructor($$source = {}) {
        if (!("host" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["host"] = "";
        }
        if (!("max_file_size" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["max_file_size"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AvailableHost instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AvailableHost}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AvailableHost(/** @type {Partial<AvailableHost>} */($$parsedSource));
    }
}

export class DownloadItem {
    /**
     * Creates a new DownloadItem instance.
     * @param {Partial<DownloadItem>} [$$source = {}] - The source object to create the DownloadItem.
     */
    constructor($$source = {}) {
        if (!("Id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Id"] = "";
        }
        if (!("FileName" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["FileName"] = "";
        }
        if (!("MimeType" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["MimeType"] = "";
        }
        if (!("FileSize" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["FileSize"] = 0;
        }
        if (!("Link" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Link"] = "";
        }
        if (!("Host" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Host"] = "";
        }
        if (!("Chunks" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Chunks"] = 0;
        }
        if (!("Download" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Download"] = "";
        }
        if (!("Generated" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Generated"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DownloadItem instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DownloadItem}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DownloadItem(/** @type {Partial<DownloadItem>} */($$parsedSource));
    }
}

/**
 * @readonly
 * @enum {string}
 */
export const RealDebridType = {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero: "",

    RealDebridTypeFree: "free",
    RealDebridTypePremium: "premium",
};

export class RealDebridUser {
    /**
     * Creates a new RealDebridUser instance.
     * @param {Partial<RealDebridUser>} [$$source = {}] - The source object to create the RealDebridUser.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("username" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["username"] = "";
        }
        if (!("email" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["email"] = "";
        }
        if (!("points" in $$source)) {
            /**
             * Fidelity points
             * @member
             * @type {number}
             */
            this["points"] = 0;
        }
        if (!("locale" in $$source)) {
            /**
             * User language
             * @member
             * @type {string}
             */
            this["locale"] = "";
        }
        if (!("avatar" in $$source)) {
            /**
             * URL
             * @member
             * @type {string}
             */
            this["avatar"] = "";
        }
        if (!("type" in $$source)) {
            /**
             * "premium" or "free"
             * @member
             * @type {RealDebridType}
             */
            this["type"] = (/** @type {RealDebridType} */(""));
        }
        if (!("premium" in $$source)) {
            /**
             * seconds left as a Premium user
             * @member
             * @type {number}
             */
            this["premium"] = 0;
        }
        if (!("expiration" in $$source)) {
            /**
             * jsonDate
             * @member
             * @type {string}
             */
            this["expiration"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RealDebridUser instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {RealDebridUser}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new RealDebridUser(/** @type {Partial<RealDebridUser>} */($$parsedSource));
    }
}

export class TraficInfo {
    /**
     * Creates a new TraficInfo instance.
     * @param {Partial<TraficInfo>} [$$source = {}] - The source object to create the TraficInfo.
     */
    constructor($$source = {}) {
        if (!("Left" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Left"] = 0;
        }
        if (!("Bytes" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Bytes"] = 0;
        }
        if (!("Links" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Links"] = 0;
        }
        if (!("Limit" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Limit"] = 0;
        }
        if (!("Type" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Type"] = "";
        }
        if (!("Extra" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Extra"] = 0;
        }
        if (!("Reset" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Reset"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TraficInfo instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {TraficInfo}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new TraficInfo(/** @type {Partial<TraficInfo>} */($$parsedSource));
    }
}
