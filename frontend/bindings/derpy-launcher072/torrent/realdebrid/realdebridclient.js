// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddTorrent() {
    let $resultPromise = /** @type {any} */($Call.ByID(1789522657));
    return $resultPromise;
}

/**
 * @returns {Promise<$models.AvailableHost[]> & { cancel(): void }}
 */
export function AvailableHosts() {
    let $resultPromise = /** @type {any} */($Call.ByID(3101348416));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<$models.DownloadItem[]> & { cancel(): void }}
 */
export function GetDownloads() {
    let $resultPromise = /** @type {any} */($Call.ByID(229522759));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<$models.TraficResponse> & { cancel(): void }}
 */
export function GetTrafic() {
    let $resultPromise = /** @type {any} */($Call.ByID(3269242439));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * Returns some informations on the current user.
 * @returns {Promise<$models.RealDebridUser | null> & { cancel(): void }}
 */
export function GetUser() {
    let $resultPromise = /** @type {any} */($Call.ByID(1276040153));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType8($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = $models.AvailableHost.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = $models.DownloadItem.createFrom;
const $$createType3 = $Create.Array($$createType2);
var $$createType4 = /** @type {(...args: any[]) => any} */(function $$initCreateType4(...args) {
    if ($$createType4 === $$initCreateType4) {
        $$createType4 = $$createType6;
    }
    return $$createType4(...args);
});
const $$createType5 = $models.TraficInfo.createFrom;
const $$createType6 = $Create.Map($Create.Any, $$createType5);
const $$createType7 = $models.RealDebridUser.createFrom;
const $$createType8 = $Create.Nullable($$createType7);
