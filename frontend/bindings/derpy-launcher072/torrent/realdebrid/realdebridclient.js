// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as settings$0 from "../../utils/settings/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @param {string} magnetLink
 * @returns {Promise<$models.AddMagnetResponse> & { cancel(): void }}
 */
export function AddTorrentByMagnet(magnetLink) {
    let $resultPromise = /** @type {any} */($Call.ByID(4152170002, magnetLink));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<$models.AvailableHost[]> & { cancel(): void }}
 */
export function AvailableHosts() {
    let $resultPromise = /** @type {any} */($Call.ByID(3101348416));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} link
 * @param {string} filePath
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DownloadByLink(link, filePath) {
    let $resultPromise = /** @type {any} */($Call.ByID(3767891143, link, filePath));
    return $resultPromise;
}

/**
 * @param {string} magnetLink
 * @param {settings$0.Settings | null} settings
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DownloadByMagnet(magnetLink, settings) {
    let $resultPromise = /** @type {any} */($Call.ByID(4183758213, magnetLink, settings));
    return $resultPromise;
}

/**
 * @returns {Promise<$models.DownloadItem[]> & { cancel(): void }}
 */
export function GetDownloads() {
    let $resultPromise = /** @type {any} */($Call.ByID(229522759));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<$models.Torrent[]> & { cancel(): void }}
 */
export function GetTorents() {
    let $resultPromise = /** @type {any} */($Call.ByID(327308577));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType6($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} id
 * @returns {Promise<$models.Torrent> & { cancel(): void }}
 */
export function GetTorrentInfoById(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(2745584388, id));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType5($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<{ [_: string]: $models.TrafficInfo }> & { cancel(): void }}
 */
export function GetTraffic() {
    let $resultPromise = /** @type {any} */($Call.ByID(3157381907));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType8($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * Returns some informations on the current user.
 * @returns {Promise<$models.RealDebridUser | null> & { cancel(): void }}
 */
export function GetUser() {
    let $resultPromise = /** @type {any} */($Call.ByID(1276040153));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType10($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * SelectFiles This function is supposed to be called after AddTorrentByMagnet() or similar. Because Real debrid needs to know which files to torrent
 * @param {$models.Torrent} torrent
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SelectFiles(torrent) {
    let $resultPromise = /** @type {any} */($Call.ByID(2036866405, torrent));
    return $resultPromise;
}

/**
 * @param {string} link
 * @returns {Promise<$models.UnrestrictResponse> & { cancel(): void }}
 */
export function UnrestrictLink(link) {
    let $resultPromise = /** @type {any} */($Call.ByID(277125621, link));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType11($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = $models.AddMagnetResponse.createFrom;
const $$createType1 = $models.AvailableHost.createFrom;
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = $models.DownloadItem.createFrom;
const $$createType4 = $Create.Array($$createType3);
const $$createType5 = $models.Torrent.createFrom;
const $$createType6 = $Create.Array($$createType5);
const $$createType7 = $models.TrafficInfo.createFrom;
const $$createType8 = $Create.Map($Create.Any, $$createType7);
const $$createType9 = $models.RealDebridUser.createFrom;
const $$createType10 = $Create.Nullable($$createType9);
const $$createType11 = $models.UnrestrictResponse.createFrom;
