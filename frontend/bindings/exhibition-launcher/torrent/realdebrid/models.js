// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class AddMagnetResponse {
    /**
     * Creates a new AddMagnetResponse instance.
     * @param {Partial<AddMagnetResponse>} [$$source = {}] - The source object to create the AddMagnetResponse.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("uri" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["uri"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AddMagnetResponse instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AddMagnetResponse}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AddMagnetResponse(/** @type {Partial<AddMagnetResponse>} */($$parsedSource));
    }
}

export class AvailableHost {
    /**
     * Creates a new AvailableHost instance.
     * @param {Partial<AvailableHost>} [$$source = {}] - The source object to create the AvailableHost.
     */
    constructor($$source = {}) {
        if (!("host" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["host"] = "";
        }
        if (!("max_file_size" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["max_file_size"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AvailableHost instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AvailableHost}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AvailableHost(/** @type {Partial<AvailableHost>} */($$parsedSource));
    }
}

export class DownloadItem {
    /**
     * Creates a new DownloadItem instance.
     * @param {Partial<DownloadItem>} [$$source = {}] - The source object to create the DownloadItem.
     */
    constructor($$source = {}) {
        if (!("Id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Id"] = "";
        }
        if (!("FileName" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["FileName"] = "";
        }
        if (!("MimeType" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["MimeType"] = "";
        }
        if (!("FileSize" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["FileSize"] = 0;
        }
        if (!("Link" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Link"] = "";
        }
        if (!("Host" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Host"] = "";
        }
        if (!("Chunks" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Chunks"] = 0;
        }
        if (!("Download" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Download"] = "";
        }
        if (!("Generated" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Generated"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DownloadItem instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DownloadItem}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DownloadItem(/** @type {Partial<DownloadItem>} */($$parsedSource));
    }
}

export class DownloadProgress {
    /**
     * Creates a new DownloadProgress instance.
     * @param {Partial<DownloadProgress>} [$$source = {}] - The source object to create the DownloadProgress.
     */
    constructor($$source = {}) {
        if (!("DownloadedBytes" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["DownloadedBytes"] = 0;
        }
        if (!("TotalBytes" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["TotalBytes"] = 0;
        }
        if (!("Percent" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Percent"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DownloadProgress instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DownloadProgress}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DownloadProgress(/** @type {Partial<DownloadProgress>} */($$parsedSource));
    }
}

/**
 * @readonly
 * @enum {string}
 */
export const RealDebridType = {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero: "",

    RealDebridTypeFree: "free",
    RealDebridTypePremium: "premium",
};

export class RealDebridUser {
    /**
     * Creates a new RealDebridUser instance.
     * @param {Partial<RealDebridUser>} [$$source = {}] - The source object to create the RealDebridUser.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("username" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["username"] = "";
        }
        if (!("email" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["email"] = "";
        }
        if (!("points" in $$source)) {
            /**
             * Fidelity points
             * @member
             * @type {number}
             */
            this["points"] = 0;
        }
        if (!("locale" in $$source)) {
            /**
             * User language
             * @member
             * @type {string}
             */
            this["locale"] = "";
        }
        if (!("avatar" in $$source)) {
            /**
             * URL
             * @member
             * @type {string}
             */
            this["avatar"] = "";
        }
        if (!("type" in $$source)) {
            /**
             * "premium" or "free"
             * @member
             * @type {RealDebridType}
             */
            this["type"] = (/** @type {RealDebridType} */(""));
        }
        if (!("premium" in $$source)) {
            /**
             * seconds left as a Premium user
             * @member
             * @type {number}
             */
            this["premium"] = 0;
        }
        if (!("expiration" in $$source)) {
            /**
             * jsonDate
             * @member
             * @type {string}
             */
            this["expiration"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RealDebridUser instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {RealDebridUser}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new RealDebridUser(/** @type {Partial<RealDebridUser>} */($$parsedSource));
    }
}

export class Torrent {
    /**
     * Creates a new Torrent instance.
     * @param {Partial<Torrent>} [$$source = {}] - The source object to create the Torrent.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("filename" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["filename"] = "";
        }
        if (!("original_filename" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["original_filename"] = "";
        }
        if (!("hash" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["hash"] = "";
        }
        if (!("bytes" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["bytes"] = 0;
        }
        if (!("original_bytes" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["original_bytes"] = 0;
        }
        if (!("host" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["host"] = "";
        }
        if (!("split" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["split"] = 0;
        }
        if (!("progress" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["progress"] = 0;
        }
        if (!("status" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["status"] = "";
        }
        if (!("added" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["added"] = "";
        }
        if (!("files" in $$source)) {
            /**
             * @member
             * @type {TorrentFile[]}
             */
            this["files"] = [];
        }
        if (!("links" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["links"] = [];
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | null | undefined}
             */
            this["ended"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | null | undefined}
             */
            this["speed"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | null | undefined}
             */
            this["seeders"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Torrent instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Torrent}
     */
    static createFrom($$source = {}) {
        const $$createField11_0 = $$createType1;
        const $$createField12_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("files" in $$parsedSource) {
            $$parsedSource["files"] = $$createField11_0($$parsedSource["files"]);
        }
        if ("links" in $$parsedSource) {
            $$parsedSource["links"] = $$createField12_0($$parsedSource["links"]);
        }
        return new Torrent(/** @type {Partial<Torrent>} */($$parsedSource));
    }
}

export class TorrentFile {
    /**
     * Creates a new TorrentFile instance.
     * @param {Partial<TorrentFile>} [$$source = {}] - The source object to create the TorrentFile.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("path" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["path"] = "";
        }
        if (!("bytes" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["bytes"] = 0;
        }
        if (!("selected" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["selected"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TorrentFile instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {TorrentFile}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new TorrentFile(/** @type {Partial<TorrentFile>} */($$parsedSource));
    }
}

export class TrafficInfo {
    /**
     * Creates a new TrafficInfo instance.
     * @param {Partial<TrafficInfo>} [$$source = {}] - The source object to create the TrafficInfo.
     */
    constructor($$source = {}) {
        if (!("Left" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Left"] = 0;
        }
        if (!("Bytes" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Bytes"] = 0;
        }
        if (!("Links" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Links"] = 0;
        }
        if (!("Limit" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Limit"] = 0;
        }
        if (!("Type" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Type"] = "";
        }
        if (!("Extra" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Extra"] = 0;
        }
        if (!("Reset" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Reset"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TrafficInfo instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {TrafficInfo}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new TrafficInfo(/** @type {Partial<TrafficInfo>} */($$parsedSource));
    }
}

export class UnrestrictResponse {
    /**
     * Creates a new UnrestrictResponse instance.
     * @param {Partial<UnrestrictResponse>} [$$source = {}] - The source object to create the UnrestrictResponse.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("filename" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["filename"] = "";
        }
        if (!("mimeType" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["mimeType"] = "";
        }
        if (!("filesize" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["filesize"] = 0;
        }
        if (!("link" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["link"] = "";
        }
        if (!("host" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["host"] = "";
        }
        if (!("chunks" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["chunks"] = 0;
        }
        if (!("crc" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["crc"] = 0;
        }
        if (!("download" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["download"] = "";
        }
        if (!("streamable" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["streamable"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new UnrestrictResponse instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {UnrestrictResponse}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new UnrestrictResponse(/** @type {Partial<UnrestrictResponse>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = TorrentFile.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = $Create.Array($Create.Any);
